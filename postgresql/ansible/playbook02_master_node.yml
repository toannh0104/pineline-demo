---
  - name: Master nodes setup
    hosts: pgmaster
    become: yes
    become_method: sudo
    gather_facts: yes
    tags: [master]
    vars:
      - wal_level: replica
      - archive_mode: 'on'
      - archive_command: /usr/pgsql-11/bin/syncwal.sh
    vars_files:
      - ./vars/parameters.yml
    tasks:
      - name: Initialize default
        shell: ./postgresql-11-setup initdb
        args:
          chdir: /usr/pgsql-11/bin
          creates: /var/lib/pgsql/11/data/PG_VERSION
      - name: Allow any authenticated user access to all databases.
        postgresql_pg_hba:
          dest: /var/lib/pgsql/11/data/pg_hba.conf
          contype: host
          address: samenet
          databases: all
          method: md5
          create: yes
      - name: Start and enable PostgreSQL service
        systemd:
          name: postgresql-11
          state: started
          enabled: yes
      - name: Configure firewall
        ignore_errors: yes
        firewalld:
          service: postgresql
          permanent: yes
          immediate: yes
          state: enabled
      - name: Set Postgres required parameters
        become: yes
        become_user: postgres
        with_items:
          - { name: 'listen_addresses', value: '*' }
          - { name: 'superuser_reserved_connections', value: 3 }
          - { name: 'log_line_prefix', value: ' %t %u %d ' }
          - { name: 'shared_buffers', value: "{{ shared_buffers }}" }
          - { name: 'effective_cache_size', value: "{{ effective_cache_size }}" }
          - { name: 'checkpoint_completion_target', value: "{{ checkpoint_completion_target }}" }
          - { name: 'wal_buffers', value: "{{ wal_buffers }}" }
          - { name: 'default_statistics_target', value: "{{ default_statistics_target }}" }
          - { name: 'random_page_cost', value: "{{ random_page_cost }}" }
          - { name: 'effective_io_concurrency', value: "{{ effective_io_concurrency }}" }
          - { name: 'work_mem', value: "{{ work_mem }}" }
          - { name: 'min_wal_size', value: "{{ min_wal_size }}" }
          - { name: 'max_wal_size', value: "{{ max_wal_size }}" }
          - { name: 'max_worker_processes', value: "{{ max_worker_processes }}" }
          - { name: 'max_parallel_workers_per_gather', value: "{{ max_parallel_workers_per_gather }}" }
          - { name: 'max_parallel_workers', value: "{{ max_parallel_workers }}" }
          # REPLICATION
          - { name: 'wal_level', value: "{{ wal_level }}" }
          - { name: 'max_wal_senders', value: "{{ max_wal_senders }}" }
          - { name: 'wal_keep_segments', value: "{{ wal_keep_segments }}" }
          - { name: 'archive_mode', value: "{{ archive_mode }}" }
          - { name: 'archive_command', value: "{{ archive_command }} %p %f" }
          - { name: 'effective_cache_size', value: "{{ effective_cache_size }}" }
        postgresql_set:
          name: "{{ item.name }}"
          value: "{{ item.value }}"
      - name: Copy script to copy WAL files from primary to standby nodes
        with_items: "{{ groups['pgstandby'] }}"
        copy:
          content: |
            #!/bin/sh
            scp -o StrictHostKeyChecking=no -q $1 {{ item }}:/var/lib/pgsql/11/walarchive/$2
            if [ $? != 0 ]
            then
              echo 'Archiver error:'
              exit 1
            fi
            exit 0
          dest: "{{ archive_command }}"
          owner: postgres
          group: postgres
          mode: '0760'
      - name: Create replica user, set MD5-hashed password
        become: yes
        become_user: postgres
        postgresql_user:
          name: "{{ replica_username }}"
          password: "{{ replica_password }}"
          encrypted: yes
          expires: infinity
          role_attr_flags: LOGIN
      - name: Grant replication privs
        become: yes
        become_user: postgres
        postgresql_query:
          db: postgres
          query: "ALTER USER {{ replica_username }} WITH REPLICATION;"
      - name: Setup Replica node access in pg_hba
        become: yes
        become_user: postgres
        with_items: "{{ groups['pgstandby'] }}"
        postgresql_pg_hba:
          dest: /var/lib/pgsql/11/data/pg_hba.conf
          address: "{{ item }}"
          contype: host
          users: "{{ replica_username }}"
          databases: replication
          method: md5
      - name: Allow any authenticated user access to all databases.
        postgresql_pg_hba:
          dest: /var/lib/pgsql/11/data/pg_hba.conf
          contype: host
          address: '{{ db_allowed_ip_range }}'
          databases: all
          method: md5
          create: yes
      - name: Create Equator database
        become: yes
        become_user: postgres
        postgresql_db:
          name: "{{ db_name }}"
          encoding: UTF-8
          lc_collate: en_US.UTF-8
          lc_ctype: en_US.UTF-8
          conn_limit: "{{ max_connections | int }}"
      - name: Create master user for Equator database
        become: yes
        become_user: postgres
        postgresql_user:
          name: "{{ db_username }}"
          password: "{{ db_password }}"
          encrypted: yes
          expires: infinity
          role_attr_flags: LOGIN
      - name: Change ownership of Equator Database
        become: yes
        become_user: postgres
        postgresql_owner:
          db: "{{ db_name }}"
          new_owner: "{{ db_username }}"
          obj_type: database
      - name: Restart PostgreSQL service to take new configs
        systemd:
          name: postgresql-11
          state: restarted