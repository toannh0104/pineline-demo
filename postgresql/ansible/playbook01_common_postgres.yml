---
  - name: Common prerequsites
    hosts: all
    become: yes
    become_method: sudo
    gather_facts: yes
    tags: [common]
    vars:
      - db_name: equator_dev
      - db_password: 'P@ss99W0rd'
      - pg_data_dir: /data/equator
      - pg_repo: 'https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm'
    tasks:
      - name: Add Postgresql Yum package repository
        yum:
          name: "{{ pg_repo }}"
          state: present
      - name: Install PostgreSQL Server
        yum:
          name:
            - postgresql11-server
            - postgresql11-libs
            - postgresql11-contrib
            - postgresql11
            - python-psycopg2
            - python-ipaddress
            - libsemanage-python
            - pexpect
      - name: Initialize default
        shell: ./postgresql-11-setup initdb
        args:
          chdir: /usr/pgsql-11/bin
          creates: /var/lib/pgsql/11/data/PG_VERSION
      - name: Allow any authenticated user access to all databases.
        postgresql_pg_hba:
          dest: /var/lib/pgsql/11/data/pg_hba.conf
          contype: host
          address: samenet
          databases: all
          method: md5
          create: yes
      - name: Start and enable PostgreSQL service
        systemd:
          name: postgresql-11
          state: started
          enabled: yes
      - name: Set default parameters
        become: yes
        become_user: postgres
        with_items:
          - { name: 'listen_addresses', value: '*' }
          - { name: 'superuser_reserved_connections', value: 3 }
          - { name: 'log_line_prefix', value: ' %t %u %d ' }
        postgresql_set:
          name: "{{ item.name }}"
          value: "{{ item.value }}"
      - name: Configure firewall
        firewalld:
          service: postgresql
          permanent: yes
          immediate: yes
          state: enabled
      # Process SSH Keys to all nodes
      - name: Prepare keys and permissions
        become: yes
        become_user: postgres
        with_items:
           - { name: '', mode: '0700', state: directory }
           - { name: /authorized_keys, mode: '0644', state: touch }
           - { name: /known_hosts, mode: '0644', state: touch }
        file:
          path: "~/.ssh{{ item.name }}"
          owner: postgres
          mode: "{{ item.mode }}"
          state: "{{ item.state }}"
      - name: Generate SSH key pair
        become: yes
        become_user: postgres
        openssh_keypair:
          path: ~/.ssh/id_rsa
          owner: postgres
        register: ssh_key
      - name: Register public key to be trusted by all other hosts
        with_items: "{{ groups['all'] }}"
        become: yes
        become_user: postgres
        when: hostvars[item].ansible_host != ansible_default_ipv4.address
        lineinfile:
          path: ~/.ssh/authorized_keys
          line: "{{ ssh_key.public_key }}"
          create: yes
        delegate_to: "{{ hostvars[item].ansible_host }}"
        remote_user: "{{ ansible_user }}"
      # Setup SELinux flags
      - name: Set SELinux flags and keep it persistent across reboots
        with_items:
          - postgresql_can_rsync
          - allow_user_postgresql_connect
        seboolean:
          name: "{{ item }}"
          state: yes
          persistent: yes
      - name: Restore Context for SSH keys access
        become: yes
        become_user: postgres
        shell: 'restorecon -R -v ~/.ssh; chcon -R -v system_u:object_r:usr_t:s0 ~/.ssh/'
        args:
          chdir: ~/
          removes: ~/.ssh/authorized_keys