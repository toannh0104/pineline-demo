---
  - name: Common prerequsites
    hosts: all
    become: yes
    become_method: sudo
    gather_facts: yes
    tags: [common]
    vars:
      - db_name: equator_dev
      - db_password: 'P@ss99W0rd'
      - pg_data_dir: /data/equator
      - pg_repo: 'https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm'
      - pexpect_url: 'https://cbs.centos.org/kojifiles/packages/python-pexpect/4.5/1.el7/noarch/python2-pexpect-4.5-1.el7.noarch.rpm'
    tasks:
      - name: Add Postgresql Yum package repository
        yum:
          name: "{{ pg_repo }}"
          state: present
      - name: Install PostgreSQL softwares
        yum:
          name:
            - postgresql11-server
            - postgresql11-libs
            - postgresql11-contrib
            - postgresql11
          state: present  
      - name: Install EPEL release (Make disabled by default)
        yum:
          name: epel-release
          state: present
      - name: Disable EPEL repo
        lineinfile:
          path: /etc/yum.repos.d/epel.repo
          regexp: "enabled\\s*=\\s*1"
          line: "enabled=0"
      - name: Install required packages for Ansible
        yum:
          disable_gpg_check: yes
          validate_certs: no
          enablerepo: epel
          name: 
            - "{{ pexpect_url }}"
            - python-psycopg2
            - python-ipaddress
            - libsemanage-python
          state: present
      # Process SSH Keys to all nodes
      - name: Prepare keys and permissions
        become: yes
        become_user: postgres
        with_items:
           - { name: '', mode: '0700', state: directory }
           - { name: /authorized_keys, mode: '0644', state: touch }
           - { name: /known_hosts, mode: '0644', state: touch }
        file:
          path: "~/.ssh{{ item.name }}"
          owner: postgres
          mode: "{{ item.mode }}"
          state: "{{ item.state }}"
      - name: Generate SSH key pair
        become: yes
        become_user: postgres
        openssh_keypair:
          path: ~/.ssh/id_rsa
          owner: postgres
        register: ssh_key
      - name: Register public key to be trusted by all other hosts
        with_items: "{{ groups['all'] }}"
        become: yes
        become_user: postgres
        when: hostvars[item].ansible_host != ansible_default_ipv4.address
        lineinfile:
          path: ~/.ssh/authorized_keys
          line: "{{ ssh_key.public_key }}"
          create: yes
        delegate_to: "{{ hostvars[item].ansible_host }}"
        remote_user: "{{ ansible_user }}"
      # Setup SELinux flags
      - name: Set SELinux flags and keep it persistent across reboots
        with_items:
          - postgresql_can_rsync
          - allow_user_postgresql_connect
        seboolean:
          name: "{{ item }}"
          state: yes
          persistent: yes
      - name: Restore Context for SSH keys access
        become: yes
        become_user: postgres
        shell: 'restorecon -R -v ~/.ssh; chcon -R -v system_u:object_r:usr_t:s0 ~/.ssh/'
        args:
          chdir: ~/
          removes: ~/.ssh/authorized_keys